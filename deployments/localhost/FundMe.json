{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__CallFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__NotEnoughMoney",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6eef70d17a2af7348cd41a03093ea36004723a87d844bb7d8c6bc8bb65ee2e05",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "953068",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x024dc504ef88d30a95f79694b9740ba68e6f1a13b50a21578d2d8ee184ba798f",
    "transactionHash": "0x6eef70d17a2af7348cd41a03093ea36004723a87d844bb7d8c6bc8bb65ee2e05",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "953068",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
  "numDeployments": 1,
  "solcInputHash": "651287e2c0b2b822e744b767085aab7c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__CallFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotEnoughMoney\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Dong Hun Kim\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function add funds\"}},\"notice\":\"This constract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Get fund from users\\n// Withdraw funds\\n// set mimnimum funding value in USD\\n\\n//SPDX-License-Identifier: MIT\\n\\n/*STYLE GUIDE*/\\n//1.pragma\\npragma solidity ^0.8.7;\\n\\n//2.import\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//3. error code (don't use require! the string needs to be saved in storage, use error code instead)\\nerror FundMe__NotOwner();\\nerror FundMe__NotEnoughMoney();\\nerror FundMe__CallFailure();\\n\\n//4. Interfaces, Contracts\\n\\n//the below is NatSpac\\n/** @title A contract for crowd funding\\n * @author Dong Hun Kim\\n * @notice This constract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n  //1) Type Declarations\\n  using PriceConverter for uint256;\\n\\n  //2) State Variables (important for optimization) SLOAD, SSTORE takes so much gas\\n  //public variables cost most\\n  uint256 public constant minimumUsd = 1 * 1e18; //need to convert into ETH, need to interact with real word(external world)\\n  //we need blockchain oracle for connected to external world!\\n  address[] private s_funders;\\n  //s_ for storage value\\n  mapping(address => uint256) private s_addressToAmountFunded; //record of how much amount the address sent\\n\\n  address private immutable i_owner;\\n\\n  AggregatorV3Interface private s_priceFeed;\\n\\n  //3) events\\n\\n  //4) modifier\\n  modifier onlyOwner() {\\n    // require(msg.sender == owner, \\\"Sender is not owner!\\\"); //it is the same with below\\n    if (msg.sender != i_owner) revert FundMe__NotOwner();\\n    //underbar means do the rest\\n    _;\\n  }\\n\\n  //5) all other functions\\n  //order : constructor, receive, fallback, exteranl, public, internal, private, view/pure\\n\\n  //prcefeed differs for network\\n  constructor(address priceFeedAddress) {\\n    //whoever deployed the project\\n    s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    i_owner = msg.sender;\\n  }\\n\\n  fallback() external payable {\\n    fund();\\n  }\\n\\n  receive() external payable {\\n    fund();\\n  }\\n\\n  //payable keyword allows access to VALUE\\n  //the below is NatSpac\\n  /**\\n   * @notice This function add funds\\n   * @dev This implements price feeds as our library\\n   */\\n  function fund() public payable {\\n    //we are allowed to do this due to having used using PriceConverter library\\n    if (msg.value.getConversionRate(s_priceFeed) < minimumUsd)\\n      revert FundMe__NotEnoughMoney();\\n    // require(\\n    //   msg.value.getConversionRate(s_priceFeed) >= minimumUsd,\\n    //   \\\"Didn't sent enough\\\"\\n    // );\\n    //setting minimum ETH paying value to 1eth\\n    // require(getCon versionRate(msg.value)>=minimumUsd, \\\"Didn't sent enough\\\"); //1e18 = 1 * 10 ** 18 == 1eth (value in WEI)\\n    //revert means canceling the transaction that was done just before and returns the gas payed in advance\\n    //the decimal point is not specified 30000000000000 is actually 3000.0000000000ETH\\n    s_funders.push(msg.sender); //record sender address\\n    s_addressToAmountFunded[msg.sender] = msg.value;\\n  }\\n\\n  //onlyOwner is like a decorator\\n  function withdraw() public payable onlyOwner {\\n    for (\\n      uint256 funderIndex = 0;\\n      funderIndex < s_funders.length;\\n      funderIndex++\\n    ) {\\n      address funder = s_funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    s_funders = new address[](0); //0 means no objects in it\\n\\n    //payable(address) makes an address payable\\n    //transfer(X) means give X to that address\\n    // payable(msg.sender).transfer(address(this).balance)\\n\\n    //send returns a boolean onSuccess or on failure\\n    // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n    // require(sendSuccess, \\\"Send failed\\\"); //this makes revert enabled! the previous instruction is revoked\\n\\n    //call is the recommended way to send tokens!\\n    (bool callSucess, ) = payable(msg.sender).call{\\n      value: address(this).balance\\n    }(\\\"\\\"); //in call parantheses we input a function, can be left empty with \\\"\\n    if (!callSucess) revert FundMe__CallFailure();\\n    // require(callSucess, \\\"Call failed\\\");\\n  }\\n\\n  function cheaperWithdraw() public payable onlyOwner {\\n    //moving to memory can save a ton of gas\\n    address[] memory funders = s_funders;\\n    //mappings can't be in memory\\n    uint256 fundersCount = funders.length;\\n    for (uint256 funderIndex = 0; funderIndex < fundersCount; funderIndex++) {\\n      address funder = funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    s_funders = new address[](0);\\n    (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n    require(success);\\n  }\\n\\n  function getOwner() public view returns (address) {\\n    return i_owner;\\n  }\\n\\n  function getFunder(uint256 index) public view returns (address) {\\n    return s_funders[index];\\n  }\\n\\n  function getAddressToAmountFunded(address funder)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return s_addressToAmountFunded[funder];\\n  }\\n\\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\\n    return s_priceFeed;\\n  }\\n}\\n\",\"keccak256\":\"0x55191694b3d0e6660af6e97eb10c417ed912cd61ea00672a01ca12b433479114\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//creating a library\\n//SPDX-License-Identifier: MIT\\n\\n//to use PriceConverter you must only test on Injected Web3 since this does not exist in Virtual Machine\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nlibrary PriceConverter {\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    //ABI\\n    //Address \\t0x8A753747A1Fa494EC906cE90E9f37563A8AF630e //docs.chain.link\\n    (, int256 price, , , ) = priceFeed.latestRoundData(); //sort of destructuring, we extract price from it\\n    return uint256(price * 1e10);\\n  }\\n\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    //finds eth worth in usd\\n    uint256 ethPrice = getPrice(priceFeed); //has additional 18 decimal points\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x59566577ce2836330abc7f6ff306adf3ef4b050795f0fa8fb62003af17beb1f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001164380380620011648339818101604052810190620000379190620000cd565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c610fde620001866000396000818161032701528181610560015281816105b001526107ab0152610fde6000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb2514610098578063098de820146100d55780633ccfd60b14610100578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a75565b6102d0565b6040516100cc9190610be5565b60405180910390f35b3480156100e157600080fd5b506100ea610319565b6040516100f79190610be5565b60405180910390f35b610108610325565b005b34801561011657600080fd5b5061011f61055c565b60405161012c9190610baf565b60405180910390f35b34801561014157600080fd5b5061014a610584565b6040516101579190610bca565b60405180910390f35b6101686101b1565b005b6101726105ae565b005b34801561018057600080fd5b5061019b60048036038101906101969190610aa2565b610842565b6040516101a89190610baf565b60405180910390f35b670de0b6b3a76400006101ef600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088990919063ffffffff16565b1015610227576040517f2245050f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b670de0b6b3a764000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103aa576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104555760008082815481106103cf576103ce610ee6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044d90610e3f565b9150506103ad565b50600067ffffffffffffffff81111561047157610470610f15565b5b60405190808252806020026020018201604052801561049f5781602001602082028036833780820191505090505b50600090805190602001906104b5929190610965565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104dc90610b9a565b60006040518083038185875af1925050503d8060008114610519576040519150601f19603f3d011682016040523d82523d6000602084013e61051e565b606091505b5050905080610559576040517f6c8913d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610633576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106b657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161066c575b5050505050905060008151905060005b818110156107465760008382815181106106e3576106e2610ee6565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061073e90610e3f565b9150506106c6565b50600067ffffffffffffffff81111561076257610761610f15565b5b6040519080825280602002602001820160405280156107905781602001602082028036833780820191505090505b50600090805190602001906107a6929190610965565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107ed90610b9a565b60006040518083038185875af1925050503d806000811461082a576040519150601f19603f3d011682016040523d82523d6000602084013e61082f565b606091505b505090508061083d57600080fd5b505050565b600080828154811061085757610856610ee6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610895836108c5565b90506000670de0b6b3a764000085836108ae9190610d53565b6108b89190610c0b565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561090e57600080fd5b505afa158015610922573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109469190610acf565b5050509150506402540be4008161095d9190610c3c565b915050919050565b8280548282559060005260206000209081019282156109de579160200282015b828111156109dd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610985565b5b5090506109eb91906109ef565b5090565b5b80821115610a085760008160009055506001016109f0565b5090565b600081359050610a1b81610f4c565b92915050565b600081519050610a3081610f63565b92915050565b600081359050610a4581610f7a565b92915050565b600081519050610a5a81610f7a565b92915050565b600081519050610a6f81610f91565b92915050565b600060208284031215610a8b57610a8a610f44565b5b6000610a9984828501610a0c565b91505092915050565b600060208284031215610ab857610ab7610f44565b5b6000610ac684828501610a36565b91505092915050565b600080600080600060a08688031215610aeb57610aea610f44565b5b6000610af988828901610a60565b9550506020610b0a88828901610a21565b9450506040610b1b88828901610a4b565b9350506060610b2c88828901610a4b565b9250506080610b3d88828901610a60565b9150509295509295909350565b610b5381610dad565b82525050565b610b6281610e09565b82525050565b6000610b75600083610c00565b9150610b8082610f49565b600082019050919050565b610b9481610de9565b82525050565b6000610ba582610b68565b9150819050919050565b6000602082019050610bc46000830184610b4a565b92915050565b6000602082019050610bdf6000830184610b59565b92915050565b6000602082019050610bfa6000830184610b8b565b92915050565b600081905092915050565b6000610c1682610de9565b9150610c2183610de9565b925082610c3157610c30610eb7565b5b828204905092915050565b6000610c4782610dbf565b9150610c5283610dbf565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610c9157610c90610e88565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610cce57610ccd610e88565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d0b57610d0a610e88565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610d4857610d47610e88565b5b828202905092915050565b6000610d5e82610de9565b9150610d6983610de9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610da257610da1610e88565b5b828202905092915050565b6000610db882610dc9565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610e1482610e1b565b9050919050565b6000610e2682610e2d565b9050919050565b6000610e3882610dc9565b9050919050565b6000610e4a82610de9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e7d57610e7c610e88565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b50565b610f5581610dad565b8114610f6057600080fd5b50565b610f6c81610dbf565b8114610f7757600080fd5b50565b610f8381610de9565b8114610f8e57600080fd5b50565b610f9a81610df3565b8114610fa557600080fd5b5056fea2646970667358221220b16aa9b89b2b793058ccf3166c271524d0a5fb86a49ec1192f2f6a79fd8df3e064736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb2514610098578063098de820146100d55780633ccfd60b14610100578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a75565b6102d0565b6040516100cc9190610be5565b60405180910390f35b3480156100e157600080fd5b506100ea610319565b6040516100f79190610be5565b60405180910390f35b610108610325565b005b34801561011657600080fd5b5061011f61055c565b60405161012c9190610baf565b60405180910390f35b34801561014157600080fd5b5061014a610584565b6040516101579190610bca565b60405180910390f35b6101686101b1565b005b6101726105ae565b005b34801561018057600080fd5b5061019b60048036038101906101969190610aa2565b610842565b6040516101a89190610baf565b60405180910390f35b670de0b6b3a76400006101ef600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088990919063ffffffff16565b1015610227576040517f2245050f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b670de0b6b3a764000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103aa576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104555760008082815481106103cf576103ce610ee6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044d90610e3f565b9150506103ad565b50600067ffffffffffffffff81111561047157610470610f15565b5b60405190808252806020026020018201604052801561049f5781602001602082028036833780820191505090505b50600090805190602001906104b5929190610965565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104dc90610b9a565b60006040518083038185875af1925050503d8060008114610519576040519150601f19603f3d011682016040523d82523d6000602084013e61051e565b606091505b5050905080610559576040517f6c8913d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610633576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106b657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161066c575b5050505050905060008151905060005b818110156107465760008382815181106106e3576106e2610ee6565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061073e90610e3f565b9150506106c6565b50600067ffffffffffffffff81111561076257610761610f15565b5b6040519080825280602002602001820160405280156107905781602001602082028036833780820191505090505b50600090805190602001906107a6929190610965565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107ed90610b9a565b60006040518083038185875af1925050503d806000811461082a576040519150601f19603f3d011682016040523d82523d6000602084013e61082f565b606091505b505090508061083d57600080fd5b505050565b600080828154811061085757610856610ee6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610895836108c5565b90506000670de0b6b3a764000085836108ae9190610d53565b6108b89190610c0b565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561090e57600080fd5b505afa158015610922573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109469190610acf565b5050509150506402540be4008161095d9190610c3c565b915050919050565b8280548282559060005260206000209081019282156109de579160200282015b828111156109dd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610985565b5b5090506109eb91906109ef565b5090565b5b80821115610a085760008160009055506001016109f0565b5090565b600081359050610a1b81610f4c565b92915050565b600081519050610a3081610f63565b92915050565b600081359050610a4581610f7a565b92915050565b600081519050610a5a81610f7a565b92915050565b600081519050610a6f81610f91565b92915050565b600060208284031215610a8b57610a8a610f44565b5b6000610a9984828501610a0c565b91505092915050565b600060208284031215610ab857610ab7610f44565b5b6000610ac684828501610a36565b91505092915050565b600080600080600060a08688031215610aeb57610aea610f44565b5b6000610af988828901610a60565b9550506020610b0a88828901610a21565b9450506040610b1b88828901610a4b565b9350506060610b2c88828901610a4b565b9250506080610b3d88828901610a60565b9150509295509295909350565b610b5381610dad565b82525050565b610b6281610e09565b82525050565b6000610b75600083610c00565b9150610b8082610f49565b600082019050919050565b610b9481610de9565b82525050565b6000610ba582610b68565b9150819050919050565b6000602082019050610bc46000830184610b4a565b92915050565b6000602082019050610bdf6000830184610b59565b92915050565b6000602082019050610bfa6000830184610b8b565b92915050565b600081905092915050565b6000610c1682610de9565b9150610c2183610de9565b925082610c3157610c30610eb7565b5b828204905092915050565b6000610c4782610dbf565b9150610c5283610dbf565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610c9157610c90610e88565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610cce57610ccd610e88565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d0b57610d0a610e88565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610d4857610d47610e88565b5b828202905092915050565b6000610d5e82610de9565b9150610d6983610de9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610da257610da1610e88565b5b828202905092915050565b6000610db882610dc9565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610e1482610e1b565b9050919050565b6000610e2682610e2d565b9050919050565b6000610e3882610dc9565b9050919050565b6000610e4a82610de9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e7d57610e7c610e88565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b50565b610f5581610dad565b8114610f6057600080fd5b50565b610f6c81610dbf565b8114610f7757600080fd5b50565b610f8381610de9565b8114610f8e57600080fd5b50565b610f9a81610df3565b8114610fa557600080fd5b5056fea2646970667358221220b16aa9b89b2b793058ccf3166c271524d0a5fb86a49ec1192f2f6a79fd8df3e064736f6c63430008070033",
  "devdoc": {
    "author": "Dong Hun Kim",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function add funds"
      }
    },
    "notice": "This constract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 75,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
